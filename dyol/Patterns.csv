,Inspired by,Key phrase,Name,Explanation,CPL,PPL,EML,WCC,PZPL,WGCC,A60,GDB,RDB,PDB,HCD,ACDI,WCI,Text
A,Angles,some actions are easier than others,Access modifier,public / internal / protected /private,,,,,,,,,,,42,,,"Annotate components with information about how others are allowed or not allowed to access them. Access can be limited by **inheritance** (__protected__ in C++), **module!modular** structure (__internal__ in C#), etc. The most popular modifiers are __public__ (everyone welcome) and __private__ (fully restricted)."
A,Converging & diverging,channel people so they come together,Developer Communication,chat rooms / office design / slack,,,,,,,,,,,,,,"A communication channel among language users that is open at all or almost all times during development. Can take a form of a specially designed office, skype chat rooms, slack channels, etc."
A,Converging & diverging,channel people to split up,Synchronisation,"async, sem, rendezvous, pipes, monitors",267,328,,,321,,,,,,,,,"Managing the use of resources by some predefined form of synchronisation between readers and writers. Can be synchronous or asynchronous, and take forms of resource locks, semaphors, pipes, rendezvous, handshakes, message passing channels, etc. Always needed for **concurrency!concurrent computing**."
A,Conveyor belts,bring a feature to the users,IDE,,,,264,,53,,,,,,,,,"Integrated Development Environments (IDEs) are used to support language users in their common tasks: code navigation, **debugging**, building, **module!modularising**, **refactoring**, etc. Can take a form of a dedicated standalone editor, a website or a plugin for a universal editor. Needs to have a well-designed **IDE GUI!UI**."
A,Feature deletion,take away features,Deprecated construct,unused / undesirable,,,,,,,,,,,,,,"In language evolution, sometimes a no longer desired construct cannot be simply removed to avoid breaking **backward compatibility**. However, it can be marked explicitly as deprecated to discourage language users to rely on it."
A,Hiding things,hide functions that shouldn't be used,Encapsulation,hide memory alloc / registers / video,104,12,,,236,,,,,,,,,"Most high level language abstract from low level details like video memory access, memory allocation, register values, caching, etc. Depending on the language philosophy, these features may be prohibited or just hard to find for beginners. Data structures can also be encapsulated by bundling them into **record!records** or **class!classes**, and code can be organised in hierarchical **module!modules**."
A,Material properties,use materials to favour some actions ,Syntax highlighting,"colour code keywords, constants, clickables",,,27,,,,,,,,,,,"A development environment of the language can profit from visualisation even if the language is textual by colour-coding different categories of words (strings, numbers, standard libraries, reserved words, etc). Colours are also commonly used for non-textual languages, unless programs are expected to be printed or viewed on grayscale devices."
A,Mazes,get people to follow the desired path,Generation,wizards / staging / …,,5,119,,,,,,,,,,,"Tedious, repetitive and error-prone programming tasks can be automated by using templates, wizards, explicit staging/morphing constructs of generative programming, construction workbenches, etc. In many practical cases the language user is allowed to edit the result to fine-tune it. The final generation **phased process!phase** is called **code generation**."
A,Pave the cowpaths,recognise desired paths & encode them,Performance testing,perf testing,,,,,,,,,,,,,279,Performance testing and its variations like profiling and stress testing are commonly desired nice-to-have features in **IDE!IDEs**. Languages and their ecosystems greatly vary in the extent to which this aspect is recognised and supported.
A,Pave the cowpaths,recognise desired paths & encode them,Big Brother,learning / adapting plugin a-la WatchDog,,,,,,,,,,,,,,"A more invasive and more powerful form of **code mining** is examining language users' actions directly. This can be done through the **IDE** by equipping the plugin with logging functionality: make it record every single action taken by the user, with all the necessary context such as the files opened, and analyse it later."
A,Positioning,rearrange things in space,IDE GUI,debug window / project explorer / …,,,,,,,,,,,,,,"Most **IDE!IDEs** divide the screen space among areas with different functionality: for navigating through adjacent programs, for editing the code, for reviewing the architecture, for watching how values change at runtime, etc. Advanced IDEs like IntelliJ, Eclipse or VS.NET have so many subwindows that the user has to choose which ones to keep open at each given time."
A,Roadblock,put things in users' way,Static analysis,parsing / type checking,,7,264,,169,,,,,,,169,105,"If a language does not directly limit its users' ability to express thing in a ""bad"" way, this is still possible for the compiler of the language. Parsing, **type check!type checking**, dependence analysis, **pretty-printing!formatting**, conventions are all examples of this. One of the language design principles states that if an error gets though one line of defence, it should be caught by the next one."
A,Segmentation & spacing,divide into parts usable one at a time,,the real name,,,,,,,,,,,,,,
A,Segmentation,divide into parts usable one at a time,Module,packages / modules / classes / procs,113,267,,92,,,,,,,459,,,"Large programs inevitably outgrow their creators' capabilities to understand them all at once. Comprehension can be aided greatly by the language providing modules, packages, classes, procedures and other elements to group related code fragments together. Modern **IDE!IDEs** can analyse code for cohesion and coupling to help improve modularisation."
A,Simplicity,structure things to easily use features,Built-in pattern,"MVC in Angular, Visitor in Rascal",,,,,,,,,,,,,,"Design patterns, implementation patterns and architecture patterns are used across language boundaries, but many domain-specific languages incorporate well-known patterns as native language constructs: Model-View-Controller, Singleton, State, Visitor, etc."
E,Are you sure?,extra confirmation step,Debugging,__ in Python,,,,,55,322,,,,,263,,261,"The activity of finding and fixing sources of incorrect behaviour is not enjoyed by many language users, but is used by all of them without exception anyway. Declarative languages are the hardest to debug and imperative ones are the easiest. Most modern languages are shipped with a dedicated debugger or have debugging functionality in the **IDE**."
E,Choice editing,phase out undesired choices,Code completion,,,,,,,,,,,,,,,"Many **IDE!IDEs** monitor what the language user is typing and make suggestions based on their knowledge of the language keywords, constructs allowed in the context, variables visible from the current namespace, etc. The list of such suggestions must be short to be useful, otherwise it does nothing but annoy the users."
E,Conditional warnings,warning based on the error,Compilation error,also compile time errors?,,,,,109,303,,21,,,88,,39,"Modern languages have many means of assessing executability of the program before it is actually run. Thus, compilers tend to have a sophisticated error handling facility and try to provide enough information for the language user to fix the problems. Some languages are notoriously known for providing bad error messages. There are many ways to __recover__ from an error in order to analyse the rest of the program and report multiple problems at once. Can be provided as a **live feedback**."
E,Defaults,make preferred option default,Default,,,,,,,,,,,,,,,"Unchanged configuration options, uninitialised **variable!variables** and unspecified optional **access modifier!modifiers** are examples of situations when a default value must be used by the compiler. These default values are decided by the language designer and typically represent the __best__ option within the paradigm."
E,Did you mean?,"detect error, suggest a better option",Compilation warning,tolerant completion?,,,,,,304,,382,,,34,,79,"When a compiler detects a possibly dangerous situation with extremely limited applicability, it displays a warning message and proceeds with the build process anyway. In many cases there is a special option for disabling a particular warning for a particular piece of code. Warnings can be given when an __anomaly__ or a **program smell!smell** is detected. Can be provided as a **live feedback**."
E,Interlock,disable feature until another one done,Debugging,"step through, into, etc",,,,,,,,,,,,,,
E,Matched affordances,fit the right way around,Type check,monadic bind,,129,,,195,26,,49,,,489,,91,"Components can be identified, explicitly or automatically, to belong to a particular __type__. Among other things, the type determines applicability and compatibility of components with one another. In complex scenarios (like a monadic bind) hard to understand components can only fit together in one possible way. Type equivalence rules can be based on names, structure, **scope & binding!scopes**, etc."
E,Opt-outs,yes to desired option by default,Default,disabling convention notifications?,,,,,,,,,,,,,,
E,Portions,change the portion size,Code completion,,,,,,,,,,,,,,,
E,Task lock-in/out,prevent inadventent use of feature,Feature Lock-out,,,,,,,,,,,,,,,"Certain combinations of language features may be disabled (errorneous) by default, with a possibility of enabling them explicitly. For example, redefining a method in a derived class is only allowed in C# when a specific __override__ keyword is used, which leaves visual cues to future readers of the piece of code in question."
I,Feedback through form,form suggest usage,Event loop,form of UI-biased concurrency,265,,,,,,,,,,,,,"This pattern in user interface implementation turns entire program into a giant loop waiting for the user to activate its functionality by choosing the way to communicate (click, tap, edit, etc). Since direct implementations are not green (consume too much energy), it can be built natively into the language and optimised by the compiler and hardware."
I,Kairos,time the suggestion to change behr,Backtracking,,,516,,,378,,,174,,,,,,"A computation strategy commonly found in declarative languages. Every choice in the evaluation path becomes a __save point__ to which the computation returns in case of failure. All the changes made between the save point and the point of failure are undone. Backtracking is common in parsers and logic programming, and used for **exception handling!error recovery** everywhere else."
I,Partial completion,build confidence by finishing phase,Phased process,"compilation phases, build phases",,38,,7,73,4,,6,,,2,2,7,"Breaking a process into phases is one of the most used divide-and-conquer principles applied in language processing. Most compilers are designed to work in phases, and different competences and skills are required to implement each phase."
I,Peer feedback,gen feedback from similar users,Code mining,,,,,,,,,,,,,,,"Besides user surveys and expert opinions, there is a third way to uncover points to improve the language in its next versions: examining existing artefacts created in this language. There are many modern techniques in mining software repositories and machine learning that can be helpful here."
I,Progress bar,show progress towards a goal,,too minor?,,,,,,,,,,,,,,
I,Real-time feedback,let users know their actions affect it,Live feedback,(memory consumption?),,,,,,,,,,,,,,"An advanced **IDE** running on modern hardware can utilise its idle cycles to attempt parsing, compilation, dependency analysis and other kinds of checks while the language user is still typing the program. Errorneous and suspicious pieces of code are commonly underlined with red or yellow squiggly lines familiar from natural word processors."
I,Simulation & feedforward,preview of results of user's actions,Preview,in refactoring,,,,,,,,,,,,,,"Some features are very useful in general, but implemented in a way that sometimes fails. In this case, the impact of an application of a feature can be explicitly examined by the language user before agreeing to proceed. Common for database queries and **refactoring!object-oriented refactorings**."
I,Summary feedback,report on what users were doing,,,,,,,,,,,,,,,,
I,Tailoring,adapt proposed features to user's needs,,,,,,,,,,,,,,,,
I,Tunnelling & wizards,take users through a decision process,Generation,(duplicate?),,,,,,,,,,,,,,
L,Challenges & targets,present a challenge,esotericism,esoteric languages - Befunge etc,,,,,,,,,,,,,,"**http://catb.org/esr/intercal/!INTERCAL**, **http://www.madore.org/~david/programs/unlambda/!Unlambda**, **http://catseye.tc/node/Befunge-93.html!Befunge**, **http://www.lscheffer.com/malbolge.shtml!Malbolge** and other **https://esolangs.org/wiki/!esoteric languages** are developed based on paradigms that are so unconventional that writing even one program puts disproportional strain on the language user. The challenging nature makes people engage and compete in programming in such languages as a form of entertainment."
L,Collections,get users to collect things through usage,,(gamification?),,,,,,,,,,,,,,
L,Leave gaps to fill,leave deliberate gaps to implement,,ANTIPATTERN!,,,,,,,,,,,,,,
L,Levels,split the system into achievable levels,,,,,,,,,,,,,,,,
L,Make it a meme,make the design viral,Meme,LOLCODE etc,,,,,,,,,,,,,,"**http://lolcode.org/!LOLCODE**, **http://lhartikk.github.io/ArnoldC/!ArnoldC** and others are languages developed based on the memes that are circulating among software engineers: the popularity of them piggybacks entirely on the viral nature of those memes."
L,Playfulness,elements that play a game with users,,,,,,,,,,,,,,,,
L,Rewards,reveal bonus functionality to good users,,,,,,,,,,,,,,,,
L,Role-playing,makes users feel like they're playing roles,,,,,,,,,,,,,,,,
L,Scores,assign a user a comparable score,,,,,,,,,,,,,,,,
L,Storytelling,tell engaging story through design,,,,,,,,,,,,,,,,
L,Unpredictable reinforcement,give rewards on random schedule,,,,,,,,,,,,,,,,
P,(A)symmetry,"symmetric = related, asymmetric = unrel",Orthogonal design,,,,,,,,,,,,,,,
P,Colour associations,colour suggests grouping,Syntax highlighting,,,,,,,,,,,,,,,
P,Contrast,obvious contrast of parts and background,Comment,,12,,23,,99,,36,,,,,,33,"Comments are pieces of **documentation** built directly into the source of the system. Most **IDE!IDEs** support comments visually by presenting them in a completely different colour, usually dimmer than the rest of the program, to focus developers on executable constructs first. In some languages like BibTeX or INTERCAL everything uncompilable is a comment."
P,Fake affordances,feature that does not really work,Syntactic sugar,,,,,,,,,,,,,,,"Nice-to-have constructs that are not extending the expressive power of the language, are sometimes not actually implemented directly — just expanded into bigger sequences of more primitive and less user-friendly constructs."
P,Implied sequences,make the order obvious,Pretty-printing,,,89,23,,,,,,,,,,42,"A language can have a **default** formatting convention that is not only accepted by the community to improve the representation quality of the programs, but also automated and shipped in a form of a tool. Such a tool can be very configurable, have limited feature selection or none at all. A pretty-printer that scans the input and minimises the **Indentation & Whitespace!delimiters** in it, is sometimes called a program __compactor__."
P,Implied sequences,make the order obvious,Order,,?,?,?,?,?,?,45,,,,,,,"Many languages have ordering constraints: a **variable** must be declared before its use, a **procedure** signature known before its call, etc. Sometimes constructs are grouped and it is the groups that must follow the order: e.g., first all declarations, then all functions, then the rest of the code (COBOL's __divisions__ are the extreme example of this)."
P,Metaphors,metaphor / analogy,Metaphor,"bug, cloud, jump",,,,,,,,,,,,,,"Atom, **backtracking**, binding, **procedure!body**, build, cloud, collision, compiler, dangling else, **debugging**, **syntactic sugar!desugaring**, **record!dictionary**, **type check!duck typing**, environment, filter, **numeric data type!floating point**, forest, framework, **garbage collection**, **branching!go to**, heap, **inheritance**, **branching!jump**, library, linking, map, **pointer**, pruning, **synchronisation!rendezvous**, stack, turtle, weaving, window, …"
P,Mimicry & mirroring,mirror or mimic a user's behaviour,,,,,,,,,,,,,,,,
P,Mood,user sensory stimuli to set a mood,,,,,,,,,,,,,,,,
P,Nakedness,remove the usual cues to make users think,Order,,,,,,,,,,,,,,,
P,Perceived affordances,the form of the system suggests its use,,,,,,,,,,,,,,,,
P,Possibility trees,(metro map),Design Chart/Diagram,,,,30,,363,90,,79,,,13,100,63,"UML distinguishes between structural (**class**, **module!package**, object, component, composite structure, deployment) and behavioural diagrams (activity, sequence, use case, state, communication, interaction overview, timing). The former specify and visualise structure breakdown, the latter — events and interaction. Some languages (e.g., syntactic diagrams) are both."
P,Prominence,exaggerate or hide a feature,,,,,,,,,,,,,,,,
P,Proximity & grouping,put related elements closer,Module,"cohesion, coupling",,,,,,,,,,,,,,
P,Seductive atmospherics,use ambient sensory effects to induce beh,,,,,,,,,,,,,,,,
P,Similarity,hide unrelated elements by mimicry,Orthogonal design,"also: regularity principle, least surprise",,8,,,,,,,,,,,,"Independent features should be controlled by independent mechanisms. Related constructs should look similar and different ones should look different. Regular rules without exceptions are easier to learn. The less surprises one has while learning the language, the higher the language quality."
P,Transparency,reveal what's under the cover,Concrete syntax,,,89,21,,41,17,,28,,,166,,,"The way to describe the concrete representation of the programs. The concrete syntax is used by humans to read, write, create and understand sentences of the language. Usually the only languages that do not have concrete syntax are those intended for internal intermediate representation. Some languages have more than one."
P,Watermarking,make the user own a thing,Code ownership,(write names on stuff),,,,,,,,,,,,,,"Signing the user's name under a piece of code has the same effect as signing a person's name on an item: caring about what happens to the item later. **Comment!Comments** explaining which dev made which code changes existed since very early on. In modern ecosystems, ownership is tracked automatically by a version control system and can be checked at any time (__git blame__)."
C,Assuaging guilt,reduce feelings of guilt,,linters?,,,,,,,,,,,,,,
C,Commitment & consistency,get users commit to an idea or goal,,metrics in plugins,,,,,,,,,,,,,,
C,Decoys,deliberately bad choices next to real ones,,,,,,,,,,,,,,,,
C,Desire for order,use people's desire for tidiness,Program smell,"term ""smells""?",,,,,,,,,,,,,,"A __smell__ is found when a code fragment has suspicious characteristics even without being wrong. Modern computer science identifies smells for code, models, architecture, spreadsheets, hardware, grammars, etc. The very use of the word ""smell"" strongly implies that any neat self-respecting language user should try to leave less of those when touching the code."
C,Do as you’re told,use an authority figure to enforce users,Holy war,EULA?,,,,,,,,,,,,,,
C,Emotional engagement,get the system to engage with user's emotions,Holy war,,,,,,,,,,,,,,,"Software engineers are very passionate about what they do and which choices they make in doing it. By explicitly stating which camp the language is siding with or which key figures of the community endorse it, one can invoke an emotional response directly mappable to language's acceptance and popularity."
C,Expert choice,endorcements by experts,,,,,,,,,,,,,,,,
C,Framing,present choices to make them all attractive,,array limits in Pascal/Ada?,,,,,,,,,,,,,,
C,Habits,allow new behaviour to become habitual,Commit hook,,,,,,,,,,,,,,,In many version control systems it is possible to write system scripts and let them run automatically on the client side (when a language user is preparing a commit) or on the server side (when the changes are shared with others). Such scripts are used to check conformance with language conventions and thus form and influence patterns of its use.
C,Personality,give the system a personality,,,,,,,,,,,,,,,,
C,Provoke empathy,show other users' perspectives,,(twitter feed),,,,,,,,,,,,,,
C,Reciprocation,make user feel there's a favour to be repaid,,,,,,,,,,,,,,,,
C,Rephrasing & renaming,"rename buttons, labels, etc",Refactoring,,,,154,,,,,,,,,,,"Refactorings are code changes that do not impact the system's behaviour but change its internal structure to improve code quality, prepare for the subsequent change, etc. Some DSMLs mean their programs to __only__ change through refactorings and refinements. In other domains it is also not uncommon to eventually get refactoring support in the **IDE**."
C,Scarcity,emphasize that the resource is valuable/limited,,,,,,,,,,,,,,,,
C,Social proof,show that other users do the same,,,,,,,,,,,,,,,,
M,Anchoring,affect expectations by controlling reference points,Labelling,"""this is FP""",,,,,,,,,,,,,,"Since most engineers know several languages, some **documentation!language manuals** directly assume some initial familiarity of their users with other languages. Can refer to paradigms or families (__""this is a **type check!strongly typed** functional language""__) or directly to other languages (__""**inheritance** works like in Java""__)."
M,Antifeatures & crippleware,disable feature to force people to upgrade,Undefined behaviour,,,,,,,,,,,,598,,,"When a particular combination of language constructs is not explicitly specified by the standard, its implementers can take different shortcuts in interpreting it. As a result, the same piece of code produces different results based on the compiler, the computer, time of day, etc. Common in legacy languages like C or COBOL."
M,Bundling,include what you want to do with smth user wants,Garbage collection,,,443,,,471,,,,,,,,,"Automatic release of memory is impossible for cyclic data structures. Languages that want to support them, have a __garbage collector__ — a runtime compiler component that occasionally __marks__ data structures that have become inaccessible and then __sweeps__ them away, freeing the memory. GC can compromise language responsiveness and performance."
M,Degrading performance,degrade performance until demands are met,,,,,,,,,,,,,,,,
M,First one free,free giveaway lures people in to pay for more,,,,,,,,,,,,,,,,
M,Forced dichotomy,"no middle option, forces users to make a choice",,,,,,,,,,,,,,,,
M,Format lock-in/out,only particular format is supported,Platform lock-in/out,C#? .NET!,,,,,,,,,,,,,,"Supporting a great language only for one particular hardware platform, OS or IDE, implicitly forces people to use them. For example, malware practices of Java installers turned some users agains JVM, which also deprived them of Scala and Clojure. Another example is .NET Core, a redesign of the .NET Framework which allows typically Windows-specific code to run on Linux."
M,Functional obsolescence,make old system wear out to force upgrades,,,,,,,,,,,,,,,,
M,"I cut, you choose",eliminate first-mover advantage,,,,,,,,,,,,,,,,
M,Poison pill,add unpleasant side-effects,,XML Booster?,,,,,,,,,,,,,,
M,Serving suggestion,direct the use through demonstration,Documentation,,,,264,,532,,,,,,,,,"Language manuals are important for people learning the language, as well as for active users — sometimes these are two different sets of documents. Documentation may contain executable examples and can/should be automatically checked for internal validity and consistency with the tooling. Many elements of the language implementation ooze into its documentation (e.g., using a grammar both to define the **concrete syntax** and enumerate language constructs in a manual)."
M,Slow / no response,encourage alternatives by making options slow,,,,,,,,,,,,,,,,
M,Style obsolescence,design things to go out of fashion quickly,,,,,,,,,,,,,,,,
M,Worry resolution,suggest a worry about behaviour and remove it,Backward compatibility,,,,,,,,,,,,,,,"In language evolution, introduce new features that should supercede older ones, but ensure the users that their existing code will still run. Ideally, this code should eventually be rewritten and coevolved."
S,Coercive atmospherics,ambient sensory effects affect behavr,,,,,,,,,,,,,,,,
S,Peerveillance,what you do is visible to peers,Code review,commits are reviewed,,,,,,,,,,,,,,"A family of practices around other developers reviewing the code submitted by one of them. Can vary in frequency, volatility, scrutiny, responsibility, intent, etc."
S,Sousveillance,what you do is visible to inferiors,Code review,,,,,,,,,,,,,,,
S,Surveillance,what you do is visible to superiors,Code review,,,,,,,,,,,,,,,
S,Threat of injury,(spikes on walls),,,,,,,,,,,,,,,,
S,Threat to property,(severe tire damage),,,,,,,,,,,,,,,,
S,What you can do,show skills to unlock features,,(gamification),,,,,,,,,,,,,,
S,What you have,tokens & access cards unlock features,,It is a syntax error to write FORTRAN while not wearing a blue tie.,,,,,,,,,,,,,,
S,What you know,"password, info",,passwords?,,,,,,,,,,,,,,
S,What you’ve done,change depending on prev.behaviour,,,,,,,,,,,,,,,,
S,Where you are,enable features by location,,,,,,,,,,,,,,,,
S,Who or what you are,vary features per person/group/object,,(gamified language learning),,,,,,,,,,,,,,
,,,Keyword,,11,92,,33,99,140,,33,,,,40,34,Special words in **concrete syntax** of the language that carry identical meaning across all possible programs in the same language. Can be made reserved so that programmers may not redefine them. A language can get new keywords by evolution.
,,,Variable,named storage fragments,52,22,,72,183,9,5,,,,522,26,,"These named memory areas are thought to be fundamental for the nature of computation — and they are within the von Neumann paradigm, which is not the only choice modern people have. One can make their language more functional and force its users to think about data flow, or make it more imperative and let them worry about where the intermediate data is stored."
,,,Scope & binding,"scope, extent, name-type binding, strong, …",55,,,,82,20,48,60,,,559,43,150,"If a **type definition!type** or a **variable** is declared, how far from the declaration can you still use them? If an outside entity is used in a **procedure**, will it be taken from the parent scope of the procedure or from the scope of the call? Several equally viable paradigms are known for scoping, name-type binding and declaration-reference binding."
,,,Type definition,"composite types, ADTs",60,268,,26,186,234,15,314,,,489,25,111,"Several GPLs and many DSLs can exist perfectly without ever needing any user-defined types. However, in many cases it can prove useful to allow the language user to make their own **record!data structures** and algebraic data types to provide their input for the **type check!type checker**."
,,,Parametrised type,"array of …, stack of …",180,279,,,291,,,,,,,,,"Some **type check!types** can be defined partially by the user and partially by the language designer. For example, the language designer knows what a **composite type!__list__** is, and the language user can select any other type for list elements — this will change handling of such elements, but the philosophy behind their collection will stay the same."
,,,Composite type,"arrays, lists, sets",156,70,,83,238,23,37,39,,,599,30,123,"Arrays, lists, tuples, sets and multisets are the most common **type definition!user-defined** **parametrised type!parametrised** types for collections of elements. It is up to the language designer to decide which ones are supported and how they are handled — can elements within on collection have different types, are they mutable, **parameter passing!passed** by name/value/reference, etc."
,,,Record,"structs, dictionaries, hashmaps, tables",169,199,,41,257,,,41,,,543,33,124,"Many languages have some kinds of records or structures that bundle several related pieces of data without attaching methods to work with that data. A dynamic variation thereof is known as a __dictionary__ or a __map__ (e.g., hashmap) and it allows users to add and remove fields at runtime."
,,,Picture clause,,,,,,,,,,,,,,,A **type check!data type** that saves a specially formatted entity (usually a float or a date) that can be used directly in printing statements but also manipulated as data.
,,,Numeric data type,integers and floats,63,65,,81,205,22,16,,,,,,36,"Often gets overlooked at the early stages of language design, but could significantly shape the application area of the language. There are many integer **type check!types**, distinguished by their byte sizes and therefore value ranges; also decimal types with fixed scale and precision; and floating point types good for scientific computations but not for handling finances."
,,,Enumeration type,"booleans, enums",66,188,,65,213,21,65,,,,550,29,123,"An enumeration is a **type definition!data type** that defines a very limited set of possible values which are, nevertheless, more comfortably referred to by their names and not by encoded numbers. The most famous enumeration is the Boolean (logical) type, which contains only two values: __true__ and __false__. If the domain permits, the language does not have to support user-defined enumerations."
,,,Character type,chars and strings,67,185,,,215,25,81,43,,,,,35,"A family of **type check!value types** that can be used in a language: single characters, special characters, zero-terminated strings, fixed length strings, variable length strings, structured strings, etc."
,,,Pointer,references,69,206,,86,220,25,,34,,,469,110,,"A popular data type in low level languages, representing a memory address where the data structure is stored — which is more efficient to pass across functions than the structure itself. The **type check!type** of the structure needs to be known to decipher itse contents, since the pointer itself is nothing more than a number."
,,,Operator precedence,,79,94,,,332,28,9,47,,,819,,71,"To avoid excessive use of parentheses, a language can provide a default convention of disambiguating constructs with 3+ entities bound by binary operators. In arithmetic expressions, the precedence usually follows mathematical laws."
,,,Assignment,":=, =, +=, overlay, map, boxing, SAC",82,105,,,201,23,3,50,,,620,36,87,Moving a data structure into another data structure. Some 4GLs have separate statements for straightforward (byte-copying) and composite (pattern-matching) assignments. In modern languages the source data structure can usually be created on the fly. Many languages combine assignment with trivial manipulation (such as +=).
,,,Block,compound statements,85,106,,,356,,13,53,,,559,676,88,Viewing a list of statements as a specific (__compound__) kind of statement is a conceptual eye-opener and allows to treat composite constructs in a uniform and **orthogonal design!orthogonal** way (__if … begin … end__ and __do … begin … end__ instead of __if … endif__ and __do … enddo__). Languages either use delimiters (begin/end or curly brackets) or **Indentation & whitespace!indentation**. Blocks can be seen as degenerate **procedure!procedures**.
,,,Branching,"if, jmp, cond, switch/case, goto",86,42,,61,357,31,20,282,,,474,38,87,"Forking the computation based on conditions known at runtime, is a popular construct. Control flow can be transferred unconditionally (__branch, jump, goto__), or conditionally (based on true/false, zero/positive/negative, explicit condition, exhaustive patterns, etc)."
,,,Iteration,"while, for, foreach, LINQ",89,47,,61,358,31,26,282,,,642,39,87,"There are many looping constructs, ranging from the imperative classics such as a for loop, to the functional classics such as __map__, __filter__ and __fold__ (or __reduce__). It is not uncommon for languages to support only some of these constructs. Some older GPLs and 4GLs also have one iterative construct which can be annotated with all kinds of conditions and steppers."
,,,Assertion,"invariants, pre- and post-conditions",,,,,,,,,,,,,,"This non-invasive form of **exception handling** allows language users to explicitly state (__assert__) invariants, pre-conditions and post-conditions as logic expressions that must universally hold. Such assertions can be easily removed before deploying the system into production."
,,,Exception handling,"raise, throw, catch, try",95,316,,,484,,,,,,,637,,"An emergency sibling of **branching** used for extraordinary situations — can be slower than the normal branching, but usually more robust in handling situations like a cricial failure during the handling of another failure. A less invasive form of exception handling are **assertion!assertions**."
,,,Procedure,"methods, procs, functions, coroutines",106,35,,74,276,75,42,55,,,466,34,157,"Pieces of code that can be executed from other places in the program, are common to all languages, since they promote reuse, but they are designed differently. Some languages only allow them to be attached to an object (methods) or a class (static methods), others provide special **synchronisation** mechanisms to procedures to cooperate (coroutines, delegates), etc. If a procedure may have __parameters__, the designer must decide on the **parameter passing** strategy."
,,,Class,+traits?,107,464,,,,,,,,,,,,A class or a trait represents a template that can be followed by objects: a particular collection of properties and methods that can be always relied on. A class can be then __instantiated__ with appropriate parameters to form an object that __conforms to__ the class definition. Classes are the ultimate form of **encapsulation**. They can be **inheritance!inherited** from one another to form **substitution!subclasses**.
,,,Redefine,"overloading, shadowing, info hiding",138,85,,,,,,,,,,293,,"Once something has been defined, it can be redefined in many languages: **inheritance!derived classes** can overload base classes' properties, local variables can shadow the global ones with the same name, the same memory fragment can be treated as belonging to two separate **type check!data types** (requiring __alias **static analysis!analysis**__), etc."
,,,First class citizen,"FP etc, higher order functions",151,397,,,431,,,,,,,,,"It is an important design point to decide which entities within a program have the right to be saved, passed as arguments, transferred through other means, etc. Numbers? Collections? Objects? Functions? Unfinished computations? Data streams? Unfilled templates?"
,,,Input / Output,"files, monads, read/write",187,13,,,223,,73,,,,,,341,"Most programs are not self-contained and require input data to run and produce results, which in turn need to be propagated somewhere. There are languages that are volatile with input and output, those that only work with files, those that wrap I/O as a side effect of a monad, etc."
,,,Inheritance,"base and derived classes, multiple",194,465,,,311,,,,,,,,,"An ""is-a"" relation can be represented by a language construct when one class, object or function __inherits__ all the properties of its __parent__ and possibly adds others exclusive to itself. It is a design consideration which entities can be derived from which, whether one can inherit from several parents, etc."
,,,Substitution,"casting, subtyping, polymorphism",197,208,,,199,,,,,,,,,"When a subprogram specifies the **type check!types** of input it expects, these types do not need to be treated precisely: often one can use entities of subtypes of the specified types (e.g., put a circle in a function that draws a shape because a circle is a subtype of shape). Subtyping is nontrivial, and the designer must choose among covariance, contravariance, invariance, etc."
,,,Lazy evaluation,"weak (ifs), strong (haskell)",239,,,,345,,,,,,,,,A __lazy__ compiler defers evaluation to the latest possible moment. Lazy languages allow infinite data structures (as long as they are processed one chunk at a time) and may have unpredictable outcomes if calculations are allowed to have side effects (like C's ++). Lazy evaluation has many applications from **optimisation** of **code generation!generated code** to stream data processing.
,,,Unification,"prolog, Rascal templates",248,507,,,369,,,,,,,,,"Given two **composite type!composite data structures**, a compiler can be tasked to find their matching components and proceed with **assignment**, transformation, etc. Limited forms of unification may be called __pattern matching__. Widely used in logic programming, metaprogramming, model synchronisation, bidirectional transformation, 4GLs for banking, etc."
,,,Conditional compilation,preprocessors,,,,,,,,,,,275,,,"Some conditions can be checked during compile type and result in different code to be produced by the compiler to be run later. This is frequently used in situations when one codebase specifies the behaviour of a system that must be compiled and deployed under a variety of devices and hardware architectures. To simplify compiler construction, conditional compilation can be handled by a preprocessor."
,,,Indentation & whitespace,,,91,23,,100,,,,,,,,,"The two extremes for this aspect are: treat indentation as something crucial to the program structure (and thus process constructs differently based on columns where they start) and discard all possible indentation (even in the middle of names, as FORTRAN does). Most languages are somewhere in the middle. Normalisation of whitespace use is called **pretty-printing**."
,,,Runtime,,,,,42,,319,,350,,,477,105,199,"A runtime environment is a system component that must accompany the result of the compilation in order for it to function correctly. May be completely non-existent, contain **standard library!standard libraries** or a **virtual machine**."
,,,Standard library,,,,,78,,,32,,,,,,164,A library or a set of libraries that are shipped together with the language. It can be a tough design decision for the language designer to decide which functionality needs to become native constructs and which can go into the standard library.
,,,Virtual machine,,,,,,75,271,,,,,446,767,,"An emulator for a real or imaginary hardware architecture that has a low level coding language that can be used by other components or tools to compiler high level languages to. VMs trades off performance for an extra layer of abstraction. Some virtual machines (e.g., **https://en.wikipedia.org/wiki/Limbo_(programming_language)!Dis**) compile their code into native machine code just before running it."
,,,Instruction set,,,,,,,292,,,,,,599,288,"Instead of freely combinable statements and expressions, low level languages (microcodes, assemblers, **virtual machine** bytecodes, etc) have limited non-extendable instruction sets. Each of the instructions typically has a mnemonic (name) and a bit-level encoding. Realistic assemblers had to introduce **macro** expansions to make programming experience tolerable."
,,,Macro,,,,,,74,294,,3,,,101,,,A mechanism commonly found in low level languages that allow users to define a piece of **syntactic sugar** to be __expanded__ into a longer sequence of **instruction set!instructions**. Advanced parametrised macros resemble **procedure!procedures** in expressivity but may behave less reliably due to their lexical nature. In bigger languages macros are typically handled by a preprocessor.
,,,Code generation,,,,,,111,253,,518,,,445,137,,"**Generation** of machine code, intermediate code, a program in a target language, an output model or a textual result, is the last **phased process!phase** of a classic compiler (before or after **optimisation**). What is typical for code generation is the richness of the input (generously annotated intermediate graphs) and a deliberate limitedness of the output (which is often platform-specific). In MDE code generation is usually implemented by model-to-text transformations."
,,,Optimisation,,,,,,110,326,,406,,,657,6,382,"It is always easier and less error-prone to **generation!generate** intermediate code or **code generation!machine code** with simple and straightforward patterns and subsequently optimise the result in a different **phased process!phase**. The effect on the language users is that they do not need to optimise their programs to the fullest, since their own naïve code will be optimised together with the rest. Small efficiences are only relevant 3% of the time, for the rest premature optimisation is considered the root of all evil."
,,,Concurrency,,,,,,483,32,,,,,,571,,"Sometimes a program can be decomposed into components that are executable in parallel on different CPU cores or different devices. This can be completely undesirable, or performed automatically, or use the language user's guidance in **synchronisation** of threads, tasks and processes."
,,,Client / Server,,,,,,526,,,,,,,,,"A language may allow one conceptual program to be split into two intercommunicating and **synchronisation!synchronised** components: the __server__ side which has access to all the necessary system data and runs in a fully controlled environment, and the __client__ side which runs closer to the system user's data and has to survive in a much less controllable environment. Client code and server code can be written in different languages or compiled to different languages before deployment."
,,,Cross-compilation,,?,?,?,?,?,?,?,24,,,,,,"A cross-compiler, or a __transpiler__, works on one platform but ultimately targets another. Relying on a cross-compiler allows to separate the development platform from the one where the programs get deployed to — for instance, a mobile app developer can work with a proper keyboard and a big screen. The **IDE** for a cross-compiled language may include a **virtual machine** for execution, **debugging**, etc."
,,,Parameter passing,,?,?,?,?,?,?,?,?,?,?,?,116,161,"There are several strategies in mapping __arguments__ that are being passed to a **procedure** in a call with the __parameters__ that procedure expects to get: __call by value__ (expose only the values, safe but inefficient for **composite type!composite data**), __call by result__ (same but can return several values at once), __call by value-result__ (the caller gets values, updates them, they are passed back), __call by reference__ (expose **pointer!pointers** to values, efficient but unsafe), __call by name__ (evaluate pointers when they are used inside the caller), etc."
,,,Heterogeneous structures,,?,?,?,?,?,?,?,?,?,?,?,,,"Some languages allow considerable freedom in **type definition!types** that makes **composite type!composite types** capable of carrying elements of varying structure. Examples: variant **record!records** in Modula and Ada, heterogeneous lists in Python, polytypic **procedure!functions** in Haskell, **https://wiki.haskell.org/Generalised_algebraic_datatype!GADTs** in Haskell."
